{"version":3,"sources":["admin.js"],"names":["$","ajax","form","bp","upload","message","log","nonce","data","option","toggleClass","this","find","attr","process","append","method","url","ajaxurl","processData","contentType","done","fail","failed","submit","e","preventDefault","FormData","val","files","length","addClass","html","get","replaceAll","stop","abort","error","console","concat","clear","removeClass","status","parse","count","Number","map","entry","empty","back","parseJSON","on","jQuery"],"mappings":"cACA,SAAUA,GACR,IAAIC,EAAO,KACPC,EAAO,KACLC,EAAKH,EAAE,eACPI,EAASJ,EAAE,sBACXK,EAAUL,EAAE,uBACZM,EAAMN,EAAE,mBACRO,EAAQJ,EAAGK,KAAK,SAStB,SAASC,IACPL,EAAOM,YAAY,kBAA8C,IAA3BV,EAAEW,MAAMH,KAAK,WAEnDL,EAAGS,KAAK,sBAAsBC,KAAK,YAAY,GAIjD,SAASC,EAAQA,GACfZ,EAAKa,OAAO,UAAWD,GAEvBb,EAAOD,EAAEC,KAAK,CACZe,OAAQ,OACRC,IAAKC,QACLC,aAAa,EACbC,aAAa,EACbZ,KAAMN,IACLmB,KAAKA,GAAMC,KAAKC,GAIrB,SAASC,EAAOC,GACdA,EAAEC,iBAEF,IAAMjB,EAASN,EAAGS,KAAK,2BAQvB,IANAV,EAAO,IAAIyB,UACNZ,OAAO,MAAON,EAAOmB,OAC1B1B,EAAKa,OAAO,QAASR,GACrBL,EAAKa,OAAO,SAAU,cACtBb,EAAKa,OAAO,OAAQ,MAEU,IAA1BN,EAAOD,KAAK,UAAiB,CAC/B,IAAMqB,EAAQzB,EAAOQ,KAAK,SAAS,GAAGiB,MACtC3B,EAAKa,OAAO,OAAQc,EAAMC,OAASD,EAAM,GAAK,MAE9Cf,EAAQ,eAERA,EAAQ,SAGVX,EAAG4B,SAAS,yBACZ1B,EAAQO,KAAK,2BAA2BoB,KAAKvB,EAAOD,KAAK,UAAYN,EAAK+B,IAAI,OAAOC,WAAW,IAAK,MACrG7B,EAAQO,KAAK,8BAA8BoB,KAAK3B,EAAQG,KAAK,YAI/D,SAAS2B,IACP,IACElC,EAAKmC,QACL,MAAOC,GACPC,QAAQD,MAAR,UAAAE,OAAwBF,IAH1B,QAKEG,IACA1B,EAAQ,QACRX,EAAGsC,YAAY,2CAKnB,SAASpB,EAAKb,GAKZ,GAFAkC,EAFAlC,EAAOmC,EAAMnC,IAIO,eAAhBA,EAAKkC,OACP,OAAO5B,EAAQ,OAKnB,SAASS,EAAOf,GACdkC,EAAOC,EAAMnC,IACbL,EAAG4B,SAAS,oBAId,SAASW,EAAOlC,GAId,GAHAH,EAAQO,KAAK,8BAA8BoB,KAAKxB,EAAKH,SACrDF,EAAG4B,SAAS,cAAgBvB,EAAKkC,QAE7BlC,EAAKF,IAAK,CACZ,IAAMsC,EAAQC,OAAOvC,EAAIM,KAAK,yBAAyBoB,QAEvD1B,EAAIM,KAAK,MAAMG,OAAOT,EAAIwC,KAAI,SAAAC,GAAK,MAAA,OAAAR,OAAWQ,EAAX,aACnCzC,EAAIM,KAAK,yBAAyBoB,KAAKY,EAAQtC,EAAIwB,SAKvD,SAASU,IACPlC,EAAIM,KAAK,MAAMoC,QACf1C,EAAIM,KAAK,yBAAyBoB,KAAK,GAIzC,SAASiB,IACPT,IACArC,EAAGsC,YAAY,0DAIjB,SAASE,EAAMnC,GACb,IACE,OAAOR,EAAEkD,UAAU1C,GACnB,MAAO6B,GACP,MAAO,CAAEK,OAAQ,QAASrC,QAASgC,IA/GvClC,EAAGgD,GAAG,QAAS,qBAAsB1C,GACrCN,EAAGgD,GAAG,SAAU,mBAAoB3B,GACpCrB,EAAGgD,GAAG,QAAS,mBAAoBhB,GACnChC,EAAGgD,GAAG,QAAS,mBAAoBF,GAbrC,CA4HGG","sourcesContent":["/* Run updater */\n(function($) {\n  let ajax = null\n  let form = null\n  const bp = $('.batchpress')\n  const upload = $('.batchpress-upload')\n  const message = $('.batchpress-message')\n  const log = $('.batchpress-log')\n  const nonce = bp.data('nonce')\n\n  // Events\n  bp.on('click', '.batchpress-option', option)\n  bp.on('submit', '.batchpress-form', submit)\n  bp.on('click', '.batchpress-stop', stop)\n  bp.on('click', '.batchpress-back', back)\n\n  // Show upload or ready form\n  function option() {\n    upload.toggleClass('batchpress-show', $(this).data('upload') === 1)\n\n    bp.find('.batchpress-button').attr('disabled', false)\n  }\n\n  // Make the ajax request\n  function process(process) {\n    form.append('process', process)\n\n    ajax = $.ajax({\n      method: 'POST',\n      url: ajaxurl,\n      processData: false,\n      contentType: false,\n      data: form\n    }).done(done).fail(failed)\n  }\n\n  // Handle form submission\n  function submit(e) {\n    e.preventDefault()\n\n    const option = bp.find('input[name=job]:checked')\n\n    form = new FormData()\n    form.append('job', option.val())\n    form.append('nonce', nonce)\n    form.append('action', 'batchpress')\n    form.append('file', null)\n\n    if (option.data('upload') === 1) {\n      const files = upload.find('input')[0].files\n      form.append('file', files.length ? files[0] : null)\n\n      process('upload')\n    } else {\n      process('start')\n    }\n\n    bp.addClass('batchpress-processing')\n    message.find('.batchpress-message-job').html(option.data('title') || form.get('job').replaceAll('-', ' '))\n    message.find('.batchpress-message-status').html(message.data('message'))\n  }\n\n  // Stop and clear queue\n  function stop() {\n    try {\n      ajax.abort()\n    } catch (error) {\n      console.error(`Abort: ${error}`)\n    } finally {\n      clear()\n      process('stop')\n      bp.removeClass('batchpress-processing batchpress-error')\n    }\n  }\n\n  // Handle ajax done event\n  function done(data) {\n    data = parse(data)\n\n    status(data)\n\n    if (data.status === 'processing') {\n      return process('run')\n    }\n  }\n\n  // Handle ajax failed event\n  function failed(data) {\n    status(parse(data))\n    bp.addClass('batchpress-error')\n  }\n\n  // Update the on page status and log\n  function status(data) {\n    message.find('.batchpress-message-status').html(data.message)\n    bp.addClass('batchpress-' + data.status)\n\n    if (data.log) {\n      const count = Number(log.find('.batchpress-log-count').html())\n\n      log.find('ul').append(log.map(entry => `<li>${entry}</li>`))\n      log.find('.batchpress-log-count').html(count + log.length)\n    }\n  }\n\n  // Clear logs\n  function clear() {\n    log.find('ul').empty()\n    log.find('.batchpress-log-count').html(0)\n  }\n\n  // Go back to start screen\n  function back() {\n    clear()\n    bp.removeClass('batchpress-done batchpress-error batchpress-processing')\n  }\n\n  // Parse JSON response\n  function parse(data) {\n    try {\n      return $.parseJSON(data)\n    } catch (error) {\n      return { status: 'error', message: error }\n    }\n  }\n})(jQuery)\n"]}